from aifc import Error
import numpy as np
from matplotlib import pyplot as plt
from functools import lru_cache

class NeuronGroup:
    def __init__(self,numOfNeurons):
        self.beta = 1
        self.numOfNeurons = numOfNeurons
        self.J = np.random.randn(numOfNeurons,numOfNeurons)
        # self.J = np.zeros((numOfNeurons,numOfNeurons))
        # self.J[5][3] = 5
        np.fill_diagonal(self.J,0)
        self.H = np.random.randn(numOfNeurons)
        # self.H = np.zeros(numOfNeurons)
        self.Z = self.PartitionFunction()

    def PartitionFunction(self):
        self.Z = 1
        return sum([self.ProbOfState(state) for state in range(2 ** self.numOfNeurons)])
    
    def PartitionFunctionMonteCarlo(self,amountOfRuns):
        self.Z = 1
        return sum([self.ProbOfState(state) for state in self.MonteCarlo(amountOfRuns)])

    def ProbOfState(self,state):
        if isinstance(state,int):
            state = self.NumToBitsArray(state)
        return np.e ** (self.beta * self.HamiltonianOfState(state)) / self.Z

    def HamiltonianOfState(self, state):
        return (state @ self.H) + (state @ self.J @ state)

    def NumToBitsArray(self,num):
        amountOfBits = self.numOfNeurons
        bits = np.array([])
        while num != 0 and amountOfBits > 0:
            newBits = np.unpackbits(np.array([num & (2 ** min(8,amountOfBits) - 1)],dtype=np.uint8))
            newBits = newBits[-min(8,amountOfBits):]
            bits = np.concatenate([newBits,bits],axis=0)
            num = num >> 8
            amountOfBits -= 8
        if amountOfBits > 0:
            bits = np.concatenate([np.zeros(amountOfBits),bits],axis = 0)
        return bits
    
    def MonteCarlo(self,amountOfResults):
        states = range(2 ** self.numOfNeurons)
        probOfStates = [self.ProbOfState(state) for state in states]
        choices = np.random.choice(states,amountOfResults,p=probOfStates)
        return np.array([self.NumToBitsArray(choice) for choice in choices])
    
    def ExpectationOfNeuronsFromDist(self):
        expectation = np.zeros(self.numOfNeurons)
        for state in range(2**self.numOfNeurons):
            bitsArray = self.NumToBitsArray(state)
            expectation += bitsArray * self.ProbOfState(state)
        return expectation

    def ExpectationOfPairsFromDist(self):
        expectation = np.zeros((self.numOfNeurons,self.numOfNeurons))
        for state in range(2**self.numOfNeurons):
            bitsArray = (self.NumToBitsArray(state) - 0.5) * 2 
            expectation += np.einsum('i,j->ij',bitsArray,bitsArray) * self.ProbOfState(state)
        return expectation / 2 + 0.5
    
    def ExpectationsFromMonteCarlo(self,amountOfRuns):
        expectationNeuronsMC = np.zeros(self.numOfNeurons)
        totalProb = 0
        expectationPairsMC = np.zeros((self.numOfNeurons,self.numOfNeurons))
        for state in self.MonteCarlo(amountOfRuns):
            bitsArray = self.NumToBitsArray(state)
            probOfState = self.ProbOfState(state)
            expectationNeuronsMC += bitsArray * probOfState
            bitsArray = (bitsArray - 0.5) * 2
            expectationPairsMC += np.einsum('i,j->ij',bitsArray,bitsArray) * probOfState
            totalProb += probOfState
        expectationPairsMC = expectationPairsMC / 2 + 0.5
        return expectationNeuronsMC / totalProb , expectationPairsMC / totalProb


    def UpdateH(self, neuronsExpectations):
        neuronsExpectationsDist = self.ExpectationOfNeuronsFromDist()
        self.H += self.lr * np.log((neuronsExpectations + np.finfo(float).eps) / (neuronsExpectationsDist + np.finfo(float).eps))
        self.Z = self.PartitionFunction()
    
    def UpdateJ(self,pairsExpectations):
        pairsExpectationsDist = self.ExpectationOfPairsFromDist()
        if np.min((pairsExpectations + np.finfo(float).eps) / (pairsExpectationsDist + np.finfo(float).eps)) <= 0 :
            raise Error
        self.J += self.lr * np.log((pairsExpectations + np.finfo(float).eps) / (pairsExpectationsDist + np.finfo(float).eps))
        self.Z = self.PartitionFunction()

    def UpdateHJMonteCarlo(self,neuronsExpectations, pairsExpectations, amountOfRuns):
        expectationNeuronsMC , expectationPairsMC = self.ExpectationsFromMonteCarlo(amountOfRuns)
        self.H += self.lr * np.log((neuronsExpectations + np.finfo(float).eps) / (expectationNeuronsMC + np.finfo(float).eps))
        self.J += self.lr * np.log((pairsExpectations + np.finfo(float).eps) / (expectationPairsMC + np.finfo(float).eps))
        self.Z = self.PartitionFunctionMonteCarlo(amountOfRuns)

    def UpdateParameters(self, neuronsExpectations, pairsExpectations,lr):
        self.lr = lr
        self.UpdateH(neuronsExpectations)
        self.UpdateJ(pairsExpectations)
    
    def UpdateParametersMonteCarlo(self, neuronsExpectations, pairsExpectations, lr, amountOfRuns):
        self.lr = lr
        self.UpdateHJMonteCarlo(neuronsExpectations, pairsExpectations, amountOfRuns)
    
    def GIS(self,neuronsExpectations, pairsExpectations,amountOfRuns = 500,lr = 0.01):
        for _ in range(amountOfRuns):
            self.UpdateParameters(neuronsExpectations,pairsExpectations,lr=lr)
    
    def GradientDescent(self, neuronsExpectations, pairsExpectations,amountOfIters = 500, amountOfRuns = 50,lr = 0.01):
        for _ in range(amountOfIters):
            self.UpdateParametersMonteCarlo(neuronsExpectations, pairsExpectations, lr, amountOfRuns)

def ExpectationOfNeurons(states):
    return np.sum(states,axis=0)/states.shape[0]


def ExpectationOfPairs(states):
    movedStates = (states - 0.5) * 2
    return (np.einsum('ij,ik->jk',movedStates,movedStates)/ states.shape[0]) / 2 + 0.5


def MutualInformationPairs(pairsExpectations, neuronsExpectations):
    return pairsExpectations - np.einsum('i,j -> ij',neuronsExpectations,neuronsExpectations)

    
group = NeuronGroup(10)
states = group.MonteCarlo(10000)
neuronsExpectations = ExpectationOfNeurons(states)
pairsExpectations = ExpectationOfPairs(states)

classifier = NeuronGroup(10)
amountOfRuns = 5000
lr = 0.05
plt.subplot(3,2,1)
plt.plot(classifier.H,group.H,'.')
plt.title('Classifier initial H')
plt.subplot(3,2,2)
plt.plot(classifier.J,group.J,'.')
plt.title('Classifier initial J')
classifier.GIS(neuronsExpectations,pairsExpectations,amountOfRuns=amountOfRuns,lr=lr)
plt.subplot(3,2,3)
plt.plot(classifier.H,group.H,'.')
plt.title(f'Classifier H after {amountOfRuns} iterations')
plt.subplot(3,2,4)
plt.plot(classifier.J,group.J,'.')
plt.title(f'Classifier J after {amountOfRuns} iterations')
plt.subplot(3,2,5)
plt.plot(group.H)
plt.title('Group H')
plt.subplot(3,2,6)
plt.plot(group.J)
plt.title('Group J')
plt.savefig(f'GIS_after_{amountOfRuns}_iters.png')
# plt.subplot(3,2,1)
# plt.imshow(np.reshape(group.H,(1,group.numOfNeurons)))
# plt.title('H')
# plt.subplot(3,2,2)
# plt.imshow(group.J)
# plt.title('J')
# plt.subplot(3,2,3)
# plt.imshow(np.reshape(neuronsExpectations,(1,group.numOfNeurons)))
# plt.title('Expectation of Neurons')
# plt.subplot(3,2,4)
# plt.imshow(pairsExpectations)
# plt.title('Expectation of Pairs')
# plt.subplot(3,2,5)
# # plt.imshow(np.reshape(neuronsExpectationsDist ,(1,group.numOfNeurons)))
# plt.plot(neuronsExpectations,neuronsExpectationsDist,'.')
# plt.title('Expectations of neurons theory vs. practice')
# plt.xlabel('Monte Carlo expectations')
# plt.ylabel('Theorized expectations')
# plt.subplot(3,2,6)
# plt.plot(pairsExpectationsDist,pairsExpectations,'.')
# plt.title('Expectations of pairs theory vs. practice')


plt.show()

