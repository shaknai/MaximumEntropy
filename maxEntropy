import numpy as np
class NeuronGroup:
    def __init__(self,numOfNeurons):
        self.beta = 1
        self.numOfNeurons = numOfNeurons
        self.J = np.random.randn(numOfNeurons,numOfNeurons)
        np.fill_diagonal(self.J,0)
        self.H = np.random.randn(numOfNeurons)
        self.Z = self.PartitionFunction()

    def PartitionFunction(self):
        self.Z = 1
        return sum([self.ProbOfState(state) for state in range(2 ** self.numOfNeurons)])

    def ProbOfState(self,state):
        if isinstance(state,int):
            state = self.NumToBitsArray(state)
        return np.e ** (- self.beta * self.HamiltonianOfState(state)) / self.Z

    def HamiltonianOfState(self, state):
        return (state @ self.H) + (state @ self.J @ state)

    def NumToBitsArray(self,num):
        amountOfBits = self.amountOfNeurons
        bits = np.array([])
        while num != 0 and amountOfBits > 0:
            newBits = np.unpackbits(np.array([num & (2 ** min(8,amountOfBits) - 1)],dtype=np.uint8))
            newBits = newBits[-min(8,amountOfBits):]
            bits = np.concatenate([newBits,bits],axis=0)
            num = num >> 8
            amountOfBits -= 8
        if amountOfBits > 0:
            bits = np.concatenate([np.zeros(amountOfBits),bits],axis = 0)
        return bits
    
    def MonteCarlo(self,amountOfResults):
        states = [self.NumToBitsArray(stateNum) for stateNum in range(2 ** self.numOfNeurons)]
        probOfStates = [self.ProbOfState(state) for state in states]
        return np.random.choice(states,amountOfResults,p=probOfStates)
    
     

