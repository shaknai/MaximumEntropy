import numpy as np
from matplotlib import pyplot as plt
from functools import lru_cache

class NeuronGroup:
    def __init__(self,numOfNeurons):
        self.beta = 1
        self.numOfNeurons = numOfNeurons
        self.J = np.random.randn(numOfNeurons,numOfNeurons)
        # self.J = np.zeros((numOfNeurons,numOfNeurons))
        # self.J[5][3] = 5
        np.fill_diagonal(self.J,0)
        self.H = np.random.randn(numOfNeurons)
        # self.H = np.zeros(numOfNeurons)
        self.Z = self.PartitionFunction()

    def PartitionFunction(self):
        self.Z = 1
        return sum([self.ProbOfState(state) for state in range(2 ** self.numOfNeurons)])

    def ProbOfState(self,state):
        if isinstance(state,int):
            state = self.NumToBitsArray(state)
        return np.e ** (self.beta * self.HamiltonianOfState(state)) / self.Z

    def HamiltonianOfState(self, state):
        return (state @ self.H) + (state @ self.J @ state)

    def NumToBitsArray(self,num):
        amountOfBits = self.numOfNeurons
        bits = np.array([])
        while num != 0 and amountOfBits > 0:
            newBits = np.unpackbits(np.array([num & (2 ** min(8,amountOfBits) - 1)],dtype=np.uint8))
            newBits = newBits[-min(8,amountOfBits):]
            bits = np.concatenate([newBits,bits],axis=0)
            num = num >> 8
            amountOfBits -= 8
        if amountOfBits > 0:
            bits = np.concatenate([np.zeros(amountOfBits),bits],axis = 0)
        return bits
    
    def MonteCarlo(self,amountOfResults):
        states = range(2 ** self.numOfNeurons)
        probOfStates = [self.ProbOfState(state) for state in states]
        choices = np.random.choice(states,amountOfResults,p=probOfStates)
        return np.array([2*(self.NumToBitsArray(choice)-0.5) for choice in choices])
    
    def ExpectationOfNeuronsFromDist(self):
        expectation = np.zeros(self.numOfNeurons)
        for state in range(2**self.numOfNeurons):
            bitsArray = (self.NumToBitsArray(state) - 0.5) * 2
            expectation += bitsArray * self.ProbOfState(state)
        return expectation

    def ExpectationOfPairsFromDist(self):
        expectation = np.zeros((self.numOfNeurons,self.numOfNeurons))
        for state in range(2**self.numOfNeurons):
            bitsArray = (self.NumToBitsArray(state) - 0.5) * 2 
            expectation += np.einsum('i,j->ij',bitsArray,bitsArray) * self.ProbOfState(state)
        return expectation
    

def ExpectationOfNeurons(states):
    return np.sum(states,axis=0)/states.shape[0]


def ExpectationOfPairs(states):
    return np.einsum('ij,ik->jk',states,states) / states.shape[0]


def MutualInformationPairs(pairsExpectations, neuronsExpectations):
    return pairsExpectations - np.einsum('i,j -> ij',neuronsExpectations,neuronsExpectations)

    
group = NeuronGroup(10)
states = group.MonteCarlo(10000)
neuronsExpectations = ExpectationOfNeurons(states)
neuronsExpectationsDist = group.ExpectationOfNeuronsFromDist()
pairsExpectations = ExpectationOfPairs(states)
pairsExpectationsDist = group.ExpectationOfPairsFromDist()
mutInformation = MutualInformationPairs(pairsExpectations, neuronsExpectations)
plt.subplot(3,2,1)
plt.imshow(np.reshape(group.H,(1,group.numOfNeurons)))
plt.title('H')
plt.subplot(3,2,2)
plt.imshow(group.J)
plt.title('J')
plt.subplot(3,2,3)
plt.imshow(np.reshape(neuronsExpectations,(1,group.numOfNeurons)))
plt.title('Expectation of Neurons')
plt.subplot(3,2,4)
plt.imshow(pairsExpectations)
plt.title('Expectation of Pairs')
plt.subplot(3,2,5)
# plt.imshow(np.reshape(neuronsExpectationsDist ,(1,group.numOfNeurons)))
plt.plot(neuronsExpectations,neuronsExpectationsDist,'.')
plt.title('Expectations of neurons theory vs. practice')
plt.xlabel('Monte Carlo expectations')
plt.ylabel('Theorized expectations')
plt.subplot(3,2,6)
plt.plot(pairsExpectationsDist,pairsExpectations,'.')
plt.title('Expectations of pairs theory vs. practice')


plt.show()

